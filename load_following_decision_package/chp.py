"""
Module Description:
    Contains functions needed to calculate the demand, electricity cost, and fuel use of
    the micro-chp unit.

Functions:
    Electricity bought
    Electricity cost
    Electricity generated
    Hourly CHP efficiency
    Heat generated
    Fuel used
"""

import classes
import numpy as np
from __init__ import ureg


def calc_hourly_electricity_bought():
    """
    This function compares mCHP capacity and minimum allowed electrical generation
    with hourly electrical demand. If demand is too high or too low, it calculates
    how much electricity needs to be purchased from the utility each hour.

    Returns
    -------
    utility_bought: list
        contains float values for electricity purchased hourly
    """
    chp = classes.CHP()
    demand = classes.EnergyDemand()

    chp_cap_kwh = chp.cap * ureg.hour
    demand_hourly = demand.el

    utility_bought_list = []

    for d in demand_hourly:
        # Verifies acceptable input value range
        assert d >= 0

        if chp.min <= d <= chp_cap_kwh:
            bought = 0
            utility_bought_list.append(bought)
        elif d < chp.min:
            bought = d
            utility_bought_list.append(bought)
        elif chp_cap_kwh < d:
            bought = abs(d - chp_cap_kwh)
            utility_bought_list.append(bought)
        else:
            raise Exception("Error in ELF calc_utility_electricity_needed function")

    return utility_bought_list


def calc_annual_electric_cost():
    """
    Calculates the annual cost of electricity bought from the local utility.

    This function calls the calc_utility_electricity_needed function and uses the
    calculated utility electricity needed. Assumes that energy dispatch for the
    mCHP system is electric load following (ELF)

    Returns
    -------
    annual_cost: float
        The total annual cost of electricity bought from the local utility
    """

    demand = classes.EnergyDemand()
    electric_rate = demand.el_cost

    total_bought = sum(calc_hourly_electricity_bought())
    annual_cost = total_bought * electric_rate

    return annual_cost


def calc_hourly_efficiency():
    """
    Calculates the hourly mCHP efficiency using part-load electrical efficiency data.

    TODO: This can be improved by linearizing the array for a more accurate efficiency value

    Returns
    -------
    efficiency_array: numpy.ndarray
        Array of efficiency values from the chp_pl array that correspond to the
        partload closest to the actual partload during that hour.
    """
    chp = classes.CHP()
    chp_cap_kwh = chp.cap * ureg.hour
    chp_pl = chp.pl

    demand = classes.EnergyDemand()
    demand_hourly = demand.el

    rows = demand_hourly.shape[0]
    eff_list = []

    # TODO: This section of code contains an error
    for i in range(rows):
        demand = demand_hourly[i]
        partload_actual = demand/chp_cap_kwh

        # Grabs the first column and calculates difference
        part_loads = chp_pl[:, 0]
        desired_shape = np.shape(part_loads)
        actual_load_array = np.full(shape=desired_shape, fill_value=partload_actual.magnitude)
        diff = np.abs(part_loads, actual_load_array)
        idx = diff.argmin()

        part_effs = chp_pl[idx, 1]
        eff_list.append(part_effs)
    return eff_list


def calc_hourly_generated_electricity():
    """
    Calculates electricity generated by the mCHP unit each hour

    Returns
    -------
    generated_list: list
        Contains values for the amount of electricity generated each hour
    """
    demand = classes.EnergyDemand()
    demand_hourly = demand.el
    demand_bought_hourly = calc_hourly_electricity_bought()

    generated_list = []

    for i in range(len(demand_hourly)):
        generated = abs(demand_bought_hourly[i] - demand_hourly[i])
        generated_list.append(generated)

    return generated_list


def calc_hourly_heat_generated():
    """
    Uses heat to power ratio and hourly electricity generated to calculate
    hourly thermal output of mCHP unit.

    Returns
    -------
    hourly_heat: list
        Hourly thermal output of CHP unit
    """
    chp = classes.CHP()
    heat_to_power = chp.hp
    electricity_generated = calc_hourly_generated_electricity()
    hourly_heat = []

    for i in range(len(electricity_generated)):
        electricity_generated[i].to(ureg.kWh)
        heat_kwh = heat_to_power * electricity_generated[i]
        heat = heat_kwh.to(ureg.Btu)
        hourly_heat.append(heat)

    return hourly_heat


def calculate_annual_fuel_use():
    """
    Uses hourly electrical efficiency values (electricity generated / fuel used)
    and hourly electricity generated to calculate fuel use for each hour.

    Assumes that energy dispatch for the mCHP system is electric load
    following (ELF).

    Returns
    -------
    total_fuel: list
        Collection of hourly fuel use values.
    """

    efficiency_list = calc_hourly_efficiency()
    electricity_generated = calc_hourly_generated_electricity()

    fuel_use = []

    for i in range(len(efficiency_list)):
        if efficiency_list[i] is not 0:
            fuel = electricity_generated[i] / efficiency_list[i]
            fuel_use.append(fuel)
        else:
            fuel_use.append(0)

    total_fuel = sum(fuel_use)
    return total_fuel


if __name__ == '__main__':
    print('stuff')
