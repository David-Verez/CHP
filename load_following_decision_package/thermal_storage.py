"""
Module Description:
    Contains functions needed to calculate the thermal energy stored and thermal
    energy dispatched by the thermal energy storage (TES) system
"""

import chp as cogen
from __init__ import ureg


def calc_heat_needs(chp=None, demand=None):
    """
    Calculates excess heat generated by the CHP unit each hour (positive values) and remaining
    demand not met by CHP unit (negative values).

    Parameters
    ---------
    chp: CHP Class
        contains initialized CHP class data using CLI inputs (see command_line.py)
    demand: EnergyDemand Class
        contains initialized EnergyDemand class data using CLI inputs (see command_line.py)

    Returns
    -------
    heat_needs: list
        Excess heat generated by CHP each hour. Values are positive for heat that will
        be stored and values are negative for heating demand gaps not filled by chp unit
    """
    if chp is not None and demand is not None:
        heat_demand = demand.hl
        chp_heat = cogen.calc_hourly_heat_generated(chp=chp, demand=demand)

        heat_needs = []

        for i in range(len(chp_heat)):
            if heat_demand[i] < chp_heat[i]:
                heat_diff = abs(heat_demand[i] - chp_heat[i])
                heat_needs.append(heat_diff)
            elif chp_heat[i] <= heat_demand[i]:
                heat_diff = -1 * abs(heat_demand[i] - chp_heat[i])
                heat_needs.append(heat_diff)
            else:
                raise Exception("Error in calc_excess_heat function")

        return heat_needs


def tes_heat_stored(chp=None, demand=None, tes=None):
    """
    Adds or subtracts heat from storage based on excess heat generated by
    CHP or demand gaps not met by CHP.

    Parameters
    ---------
    chp: CHP Class
        contains initialized CHP class data using CLI inputs (see command_line.py)
    demand: EnergyDemand Class
        contains initialized EnergyDemand class data using CLI inputs (see command_line.py)
    tes: TES Class
        contains initialized TES class data using CLI inputs (see command_line.py)

    Returns
    -------
    storage_history: list
        Hourly status of TES storage. Values are heat stored in Btu.
    """
    if chp is not None and demand is not None and tes is not None:
        heat_needs = calc_heat_needs(chp=chp, demand=demand)

        storage_size = tes.cap
        stored_heat = 0 * ureg.Btu
        storage_history = []

        for i in range(len(heat_needs)):
            update = stored_heat + heat_needs[i]
            if 0 <= heat_needs[i] and update < storage_size:
                stored_heat += heat_needs[i]
                storage_history.append(stored_heat)
            elif 0 <= heat_needs[i] and storage_size <= update:
                stored_heat = storage_size
                storage_history.append(stored_heat)
            elif heat_needs[i] < 0 <= update < storage_size:
                stored_heat += heat_needs[i]
                storage_history.append(stored_heat)
            elif heat_needs[i] < 0 <= storage_size <= update:
                stored_heat = storage_size
                storage_history.append(stored_heat)
            elif update and heat_needs[i] <= 0:
                stored_heat = 0 * ureg.Btu
                storage_history.append(stored_heat)
            else:
                raise Exception("Error in tes_heat_stored function")

        return storage_history


if __name__ == "__main__":
    x = tes_heat_stored()
    y = calc_heat_needs()
    print(x)
