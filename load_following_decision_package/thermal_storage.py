"""
Module Description:
    Contains functions needed to calculate the heat generated and fuel used
    by the auxiliary boiler

Functions:
    Heat excess or deficit
    Store or discharge
"""

import chp as cogen
import classes


def calc_heat_needs():
    """
    Calculates excess heat generated by the CHP unit each hour (positive values) and remaining
    demand not met by CHP unit (negative values).

    Returns
    -------
    excess_heat: list
        Excess heat generated by CHP each hour. Values are positive for heat that will
        be stored and values are negative for heating demand gaps not filled by chp unit
    """
    demand = classes.EnergyDemand()
    heat_demand = demand.hl
    chp_heat = cogen.calc_heat_generated()

    heat_needs = []

    for i in range(len(chp_heat)):
        if heat_demand[i] < chp_heat[i]:
            heat_diff = abs(heat_demand[i] - chp_heat[i])
            heat_needs.append(heat_diff)
        elif chp_heat[i] <= heat_demand[i]:
            heat_diff = -1 * abs(heat_demand[i] - chp_heat[i])
            heat_needs.append(heat_diff)
        else:
            raise Exception("Error in calc_excess_heat function")

    return heat_needs


# TODO: Plot storage history
def store_or_discharge_heat():
    """
    Adds or subtracts heat from storage based on excess heat generated by
    CHP or demand gaps not met by CHP.

    Returns
    -------
    storage_history: list
        Hourly status of TES storage. Values are heat stored in Btu.
    """
    heat_needs = calc_heat_needs()
    tes = classes.TES()

    storage_size = tes.cap
    stored_heat = 0
    storage_history = []

    for i in range(len(heat_needs)):
        update = stored_heat + heat_needs[i]
        if 0 < heat_needs[i] and update < storage_size:
            stored_heat += heat_needs[i]
            storage_history.append(stored_heat)
        elif 0 < heat_needs[i] and storage_size < update:
            stored_heat = storage_size
            storage_history.append(stored_heat)
        elif heat_needs[i] < 0 < update:
            stored_heat += heat_needs[i]
            storage_history.append(stored_heat)
        elif update < 0:
            stored_heat = 0
            storage_history.append(stored_heat)
        else:
            raise Exception("Error in store_or_discharge_heat function")

    return storage_history
