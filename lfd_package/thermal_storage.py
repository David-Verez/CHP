"""
Module Description:
    Contains functions needed to calculate the thermal energy stored and thermal
    energy dispatched by the thermal energy storage (TES) system
"""

from lfd_package import chp as cogen
from lfd_package.__init__ import ureg


def calc_excess_heat(chp=None, demand=None):
    """
    Calculates excess heat generated by the CHP unit each hour.

    Parameters
    ---------
    chp: CHP Class
        contains initialized CHP class data using CLI inputs (see command_line.py)
    demand: EnergyDemand Class
        contains initialized EnergyDemand class data using CLI inputs (see command_line.py)

    Returns
    -------
    excess_heat: list
        Excess heat generated by CHP each hour.
    """
    if chp is not None and demand is not None:
        heat_demand = demand.hl
        chp_heat = cogen.calc_hourly_heat_generated(chp=chp, demand=demand)

        excess_heat = []

        for index, heat in enumerate(chp_heat):
            if heat_demand[index] < heat:
                heat_diff = abs(heat - heat_demand[index])
                excess_heat.append(heat_diff)
            else:
                heat_diff = 0
                excess_heat.append(heat_diff)
        return excess_heat


def calc_heat_deficit(chp=None, demand=None):
    """
    Calculates the difference between the heat generated by the mCHP unit and the
    heat needed to meet demand.

    Parameters
    ----------
    chp: CHP Class
        contains initialized CHP class data using CLI inputs (see command_line.py)
    demand: EnergyDemand Class
        contains initialized EnergyDemand class data using CLI inputs (see command_line.py)

    Returns
    -------
    heat_deficit: list
        Additional heat needed to meet demand each hour.
    """
    if chp is not None and demand is not None:
        heat_demand = demand.hl
        chp_heat = cogen.calc_hourly_heat_generated(chp=chp, demand=demand)

        heat_deficit = []

        for index, heat in enumerate(chp_heat):
            if heat_demand[index] <= heat:
                heat_diff = 0
                heat_deficit.append(heat_diff)
            else:
                heat_diff = abs(heat_demand[index] - heat)
                heat_deficit.append(heat_diff)
        return heat_deficit


# TODO: Fix this function
def tes_heat_stored(chp=None, demand=None, tes=None):
    """
    Adds or subtracts heat from storage based on excess heat generated by
    CHP or demand gaps not met by CHP.

    Parameters
    ---------
    chp: CHP Class
        contains initialized CHP class data using CLI inputs (see command_line.py)
    demand: EnergyDemand Class
        contains initialized EnergyDemand class data using CLI inputs (see command_line.py)
    tes: TES Class
        contains initialized TES class data using CLI inputs (see command_line.py)

    Returns
    -------
    storage_history: list
        Hourly status of TES storage. Values are heat stored in Btu.
    """
    if chp is not None and demand is not None and tes is not None:
        excess = calc_excess_heat(chp=chp, demand=demand)
        deficit = calc_heat_deficit(chp=chp, demand=demand)

        heat_needs = []
        storage_history = []

        for index, e in enumerate(excess):
            if e == 0 and 0 < deficit[index]:
                d = deficit[index]
                heat_needs.append(-1 * d)
            elif deficit[index] == 0 < e:
                heat_needs.append(e)
            else:
                raise Exception('heat_needs list creation failed')

        for index, i in enumerate(heat_needs):
            new_status = i + sum(storage_history[:index])   # Summation should fix exception raised in aux_boiler module
            if i == 0:
                stored_heat = 0
                storage_history.append(stored_heat)
            elif 0 < i and new_status <= tes.cap.magnitude:
                stored_heat = i
                storage_history.append(stored_heat)
            elif 0 < i and tes.cap.magnitude < new_status:
                diff = new_status - tes.cap.magnitude
                stored_heat = i - diff
                storage_history.append(stored_heat)
            elif i < 0 <= new_status:
                stored_heat = i
                storage_history.append(stored_heat)
            elif i < 0 and new_status < 0:
                diff = new_status
                stored_heat = abs(i - diff)
                storage_history.append(stored_heat)
            else:
                raise Exception("Error in tes_heat_stored function")

        return storage_history
